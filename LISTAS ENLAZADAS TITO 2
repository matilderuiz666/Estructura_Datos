MAIN
#include <iostream>
#include "LinkedList.h"
using namespace std;

int main() {
    int A[] = { 1,2,3,4,5,6,7,8,9,10 };
    int n = sizeof(A) / sizeof(A[0]);
    LinkedList lista(A, n);
    lista.display();
    cout << "El tamanho de la lista es: " << lista.length() << endl;
    cout << "El valor maximo de la lista es: " << lista.mayor() << endl;
    cout << "El valor minimo de la lista es: " << lista.menor() << endl;
    lista.insert(2, 21);
    if (lista.deleteNode(7) == -1)
        cout << "Valores no adecuados para eliminar nodos" << endl;
    else
        cout << "La lista despues de insertar el elemento" << endl;
        lista.display();
    
    return 0;
}

LINKEDLIST.H
#pragma once
#include "Node.h"
class LinkedList
{
private:
    Node* first;
public:
    LinkedList() {
        first = nullptr;
    }
    LinkedList(int A[], int n);
    void display();
    void insert(int index, int valor);
    int deleteNode(int index);
    //void remove (int A[], int n);
    //void search (int A[], int n);
    int length();
    int mayor();
    int menor();
};


LINKEDLIST.CPP
#include <iostream>
#include "LinkedList.h"
using namespace std;

LinkedList::LinkedList(int A[], int n) {
    Node* t, * last;
    first = new Node();
    first->data = A[0];
    first->next = nullptr;
    last = first;
    for (int i = 1; i < n; i++) {
        t = new Node();
        t->data = A[i];
        last->next = t;
        last = t;
    }
}
void LinkedList::display() {
    Node* p = first;
    while (p) {
        cout << p->data << endl;
        p = p->next;
    }
}

int LinkedList::length() {
    Node* p = first;
    int contador = 0;
    while (p) {
        contador = contador + 1;
        p = p->next;
    }
    return contador;
}

int LinkedList::mayor() {
    Node* p = first;
    int maximo = 0;
    while (p) {
        if (p->data > maximo)
            maximo = p->data;
        p = p->next;
    }
    return maximo;
}
int LinkedList::menor() {
    Node* p = first;
    int minimo = first->data;
    while (p) {
        if (p->data < minimo)
            minimo = p->data;
        p = p->next;
    }
    return minimo;
}
void LinkedList::insert(int index, int valor) {
    Node* t, * p = first;
    int contador = 0;
    if (index < 0 || length() < index) {
        cout << "Index is out of bounds" << endl;
        return;
    }
    t = new Node();
    t->data = valor;
    t->next = nullptr;
    if (index == 0) {
        t->next = first;
        first = t;
    }
    else {
        for (int i = 0; i < index - 1; i++) {
            p->next;
        }
        t->next = p->next;
        p->next = t;
    }

}

int LinkedList::deleteNode(int index) {
    Node* p, * q = nullptr;
    int x;
    if (index<1 || index>length()) {
        return -1;
    }
    if (index == 1) {
        p = first;
        first = first->next;
        x = p->data;
        delete p;
    }
    else {
        p = first;
        for (int i = 0; i < index - 1; i++) {
            q = p;
            p = p->next;
        }
        q->next = p->next;
        x = p->data;
        delete p;
    }
    return x;
}

NODE.H
#pragma once
class Node
{
public:
    int data;
    Node* next;
};

